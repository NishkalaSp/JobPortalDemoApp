@model JobPortalDemoApp.Models.RegisterFormModel

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Register1</title>
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/Register.css" rel="stylesheet" />
</head>
<body>
    <div id="register-form-container">
        <ul id="progressbar">
            <li class="active">Personal details</li>
            <li>Education details</li>
            <li>Work Experience details</li>
        </ul>
        @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { id = "register-form", enctype = "multipart/form-data" }))
        {

            <fieldset class="personal-details">

                <h3 class="fs-title">Personal Details</h3>


                <div class="form-group">
                    @Html.LabelFor(model => model.PersonalDetail.FirstName, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.EditorFor(model => model.PersonalDetail.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PersonalDetail.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.PersonalDetail.LastName, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.EditorFor(model => model.PersonalDetail.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PersonalDetail.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.PersonalDetail.Email, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.TextBoxFor(model => model.PersonalDetail.Email, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PersonalDetail.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.PersonalDetail.ContactNumber, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.TextBoxFor(model => model.PersonalDetail.ContactNumber, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PersonalDetail.ContactNumber, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.PersonalDetail.Password, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.EditorFor(model => model.PersonalDetail.Password, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PersonalDetail.Password, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.PersonalDetail.ConfirmPassword, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.EditorFor(model => model.PersonalDetail.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PersonalDetail.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.PersonalDetail.DOB, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.TextBoxFor(model => model.PersonalDetail.DOB, new { @class = "form-control date-picker" })
                        @Html.ValidationMessageFor(model => model.PersonalDetail.DOB, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Upload Resume", htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.TextBoxFor(model => model.PersonalDetail.ResumeFile, new { @class = "form-control-file", type = "file", accept = ".doc,.docx,.pdf,.txt" })
                        @Html.ValidationMessageFor(model => model.PersonalDetail.ResumeFile, "", new { @class = "text-danger" })
                    </div>
                </div>



                <input type="button" name="next" class="next" value="Next" />

            </fieldset>

            <fieldset class="education-details">

                <h3 class="fs-title">Education Details</h3>
                @{
                    var qualifications = new List<SelectListItem>();
                    qualifications.Add(new SelectListItem()
                    {
                        Text = "PHD",
                        Value = "PHD"
                    });
                    qualifications.Add(new SelectListItem()
                    {
                        Text = "Masters/Post-Graduation",
                        Value = "Masters/Post-Graduation"
                    });
                    qualifications.Add(new SelectListItem()
                    {
                        Text = "Graduation/Diploma",
                        Value = "Graduation/Diploma"
                    });
                    qualifications.Add(new SelectListItem()
                    {
                        Text = "12th",
                        Value = "12th"
                    });
                    qualifications.Add(new SelectListItem()
                    {
                        Text = "10th",
                        Value = "10th"
                    });

                    var educationTypes = new List<SelectListItem>();
                    educationTypes.Add(new SelectListItem() { Text = "Full-Time", Value = "1" });
                    educationTypes.Add(new SelectListItem() { Text = "Correspondence", Value = "2" });

                }

                <div class="form-group">
                    @Html.LabelFor(model => model.EducationDetail.HighestQualification, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.DropDownListFor(model => model.EducationDetail.HighestQualification,
                                 qualifications,
                                 "--Select Qualification--",
                                 new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.EducationDetail.HighestQualification, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.EducationDetail.InstituteOrUniversityName, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.EditorFor(model => model.EducationDetail.InstituteOrUniversityName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EducationDetail.InstituteOrUniversityName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.EducationDetail.MajorBranch, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.EditorFor(model => model.EducationDetail.MajorBranch, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EducationDetail.MajorBranch, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.EducationDetail.Percentage, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.EditorFor(model => model.EducationDetail.Percentage, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EducationDetail.Percentage, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.EducationDetail.Type, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.DropDownListFor(model => model.EducationDetail.Type,
                             educationTypes,
                             "--Select Education Type--",
                             new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.EducationDetail.Type, "", new { @class = "text-danger" })
                    </div>
                </div>
                <input type="button" name="previous" class="previous" value="Previous" />
                <input type="button" name="next" class="next" value="Next" />

            </fieldset>

            <fieldset class="experience-details">

                <h3 class="fs-title">Work Experience Details</h3>
                <div>
                    <div id="items"></div>
                    <button class="btn btn-primary" id="add-work-exp-btn">Add Company</button>
                </div>
                <input type="button" name="previous" class="previous" value="Previous" />
                <input type="submit" name="submit" class="submit" value="Submit" />
            </fieldset>
        }
    </div>
    <script src="~/Scripts/jquery-1.12.4.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.6.4/css/bootstrap-datepicker.css" type="text/css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.6.4/js/bootstrap-datepicker.js" type="text/javascript"></script>
    <script src="~/Scripts/chosen.jquery.min.js"></script>
    <script>
        var current_fs, next_fs, previous_fs;
        $(".date-picker").datepicker();
        var count = 0;
        $("#add-work-exp-btn").on("click", function (e) {
            e.preventDefault();
            $.ajax({
                type: 'get',
                url: '@Url.Action("GetWorkExperienceView", "Account")',
                data: { count: count },
                //contentType: 'application/json; charset=utf-8',
                dataType: "html",
                success: function (data) {
                    alert(data);
                    $("#items").append(data);
                    $('.customDate').datepicker();
                    $(".chosen-select").chosen({ width: "95%" });
                    $("form").removeData("validator").removeData("unobtrusiveValidation");
                    $.validator.unobtrusive.parse("form");

                    count++;
                }
            });
        });
        $.validator.addMethod("maxdate", function (value, element, currentdate) {
            if (value) {
                alert(value);
                alert(currentdate);
                if (value < currentdate) {
                    return true;
                }
                return false;
            }
            return true;

        });

        $(".next").click(function () {

            current_fs = $(this).parent();
            next_fs = $(this).parent().next();

            if (current_fs.hasClass("personal-details")) {
                if ($(".personal-details input").valid()) {
                    debugger;
                    goToNextFs(current_fs, next_fs);

                }
            }

            else if (current_fs.hasClass("education-details")) {
                if ($(".education-details input").valid()) {
                    debugger;
                    goToNextFs(current_fs, next_fs);

                }
            }

            else if (current_fs.hasClass("experience-details")) {
                if ($(".experience-details input").valid()) {
                    debugger;
                    goToNextFs(current_fs, next_fs);

                }
            }

            //current_fs.animate({ opacity: 0 }, {
            //    step: function (now, mx) {
            //        //as the opacity of current_fs reduces to 0 - stored in "now"
            //        //1. scale current_fs down to 80%
            //        scale = 1 - (1 - now) * 0.2;
            //        //2. bring next_fs from the right(50%)
            //        left = (now * 50) + "%";
            //        //3. increase opacity of next_fs to 1 as it moves in
            //        opacity = 1 - now;
            //        current_fs.css({
            //            'transform': 'scale(' + scale + ')',
            //            'position': 'absolute'
            //        });
            //        next_fs.css({ 'left': left, 'opacity': opacity });
            //    },
            //    duration: 800,
            //    complete: function () {
            //        current_fs.hide();
            //        animating = false;
            //    },
            //    //this comes from the custom easing plugin
            //    easing: 'easeInOutBack'
            //});
        });

        var goToNextFs = function (current_fs, next_fs) {
            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
            next_fs.show();
            current_fs.hide();
        };

        $(".previous").click(function () {
            current_fs = $(this).parent();
            previous_fs = $(this).parent().prev();

            //de-activate current step on progressbar
            $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");

            //show the previous fieldset
            previous_fs.show();
            //hide the current fieldset
            current_fs.hide();
            //hide the current fieldset with style
            //current_fs.animate({ opacity: 0 }, {
            //    step: function (now, mx) {
            //        //as the opacity of current_fs reduces to 0 - stored in "now"
            //        //1. scale previous_fs from 80% to 100%
            //        scale = 0.8 + (1 - now) * 0.2;
            //        //2. take current_fs to the right(50%) - from 0%
            //        left = ((1 - now) * 50) + "%";
            //        //3. increase opacity of previous_fs to 1 as it moves in
            //        opacity = 1 - now;
            //        current_fs.css({ 'left': left });
            //        previous_fs.css({ 'transform': 'scale(' + scale + ')', 'opacity': opacity });
            //    },
            //    duration: 800,
            //    complete: function () {
            //        current_fs.hide();
            //        animating = false;
            //    },
            //    //this comes from the custom easing plugin
            //    easing: 'easeInOutBack'
            //});
        });


    </script>

</body>
</html>
